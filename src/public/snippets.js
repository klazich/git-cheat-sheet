export const categories = [
  `Create`,
  `Local Changes`,
  `Commit History`,
  `Branches & Tags`,
  `Update & Publish`,
  `Merge & Rebase`,
  `Undo`,
]

export default [
  {
    _id: 1,
    category: 'Create',
    description: `Clone an existing repository`,
    command: `git clone ssh://user@domain.can/repo.git`,
  },
  {
    _id: 2,
    category: 'Create',
    description: `Create a new local repository`,
    command: `git init`,
  },
  {
    _id: 3,
    category: `Local Changes`,
    description: `Changed files in your working directory`,
    command: `git status`,
  },
  {
    _id: 4,
    category: `Local Changes`,
    description: `Changes to tracked files`,
    command: `git diff`,
  },
  {
    _id: 5,
    category: `Local Changes`,
    description: `Add all current changes to the next commit`,
    command: `git add .`,
  },
  {
    _id: 6,
    category: `Local Changes`,
    description: `Add some changes in <file> to the next commit`,
    command: `git add -p <file>`,
  },
  {
    _id: 7,
    category: `Local Changes`,
    description: `Commit all local changes in tracked files`,
    command: `git commit -a`,
  },
  {
    _id: 8,
    category: `Local Changes`,
    description: `Commit previously staged changes`,
    command: `git commit`,
  },
  {
    _id: 9,
    category: `Local Changes`,
    description: `Change the last commit (Don't amend published commits)`,
    command: `git commit --amend`,
  },
  {
    _id: 10,
    category: `Commit History`,
    description: `Show all commits, starting with newest`,
    command: `git log`,
  },
  {
    _id: 11,
    category: `Commit History`,
    description: `Show changes over time for a specific file`,
    command: `git log -p <file>`,
  },
  {
    _id: 12,
    category: `Commit History`,
    description: `Who changed what and when in <file>`,
    command: `git blame <file>`,
  },
  {
    _id: 13,
    category: `Branches & Tags`,
    description: `List all existing branches`,
    command: `git branch -av`,
  },
  {
    _id: 14,
    category: `Branches & Tags`,
    description: `Switch HEAD branch`,
    command: `git checkout <branch>`,
  },
  {
    _id: 15,
    category: `Branches & Tags`,
    description: `Create a new branch based on your current HEAD`,
    command: `git branch <new-branch>`,
  },
  {
    _id: 16,
    category: `Branches & Tags`,
    description: `Create a new tracking branch based on a remote branch`,
    command: `git checkout --track <remote/bran-ch>`,
  },
  {
    _id: 17,
    category: `Branches & Tags`,
    description: `Delete a local branch`,
    command: `git branch -d <branch>`,
  },
  {
    _id: 18,
    category: `Branches & Tags`,
    description: `Mark the current commit with a tag`,
    command: `git tag <tag-name>`,
  },
  {
    _id: 19,
    category: `Update & Publish`,
    description: `List all currently configured remotes`,
    command: `git remote -v`,
  },
  {
    _id: 20,
    category: `Update & Publish`,
    description: `Show information about a remote`,
    command: `git remote show <remote>`,
  },
  {
    _id: 21,
    category: `Update & Publish`,
    description: `Add new remote repository, named <remote>`,
    command: `git remote add <shortname> <url>`,
  },
  {
    _id: 22,
    category: `Update & Publish`,
    description: `Download all changes from <remote>, but don't integrate into HEAD`,
    command: `git fetch <remote>`,
  },
  {
    _id: 23,
    category: `Update & Publish`,
    description: `Download changes and directly merge/integrate into HEAD`,
    command: `git pull <remote> <branch>`,
  },
  {
    _id: 24,
    category: `Update & Publish`,
    description: `Publish local changes on a remote`,
    command: `git push <remote> <branch>`,
  },
  {
    _id: 25,
    category: `Update & Publish`,
    description: `Delete a branch on the remote`,
    command: `git branch -dr <remote/branch>`,
  },
  {
    _id: 26,
    category: `Update & Publish`,
    description: `Publish your tags`,
    command: `git push --tags`,
  },
  {
    _id: 27,
    category: `Merge & Rebase`,
    description: `Merge <branch> into your current HEAD`,
    command: `git merge <branch>`,
  },
  {
    _id: 28,
    category: `Merge & Rebase`,
    description: `Rebase your current HEAD onto <branch> (Don't rebase published commits!)`,
    command: `git rebase <branch>`,
  },
  {
    _id: 29,
    category: `Merge & Rebase`,
    description: `Abort a rebase`,
    command: `git rebase --abort`,
  },
  {
    _id: 30,
    category: `Merge & Rebase`,
    description: `Continue a rebase after resolving conflicts`,
    command: `git rebase --continue`,
  },
  {
    _id: 31,
    category: `Merge & Rebase`,
    description: `Use your configured merge tool to solve conflicts`,
    command: `git mergetool`,
  },
  {
    _id: 32,
    category: `Merge & Rebase`,
    description: `Use your editor to manually solve conflicts and (after resolving) mark file as resolved`,
    command: `git add <resolved-file> $ git rm <resolved-file>`,
  },
  {
    _id: 33,
    category: `Undo`,
    description: `Discard all local changes in your working directory`,
    command: `git reset --hard HEAD`,
  },
  {
    _id: 34,
    category: `Undo`,
    description: `Discard local changes in a specific file`,
    command: `git checkout HEAD <file>`,
  },
  {
    _id: 35,
    category: `Undo`,
    description: `Revert a commit (by producing a new commit with contrary changes)`,
    command: `git revert <commit>`,
  },
  {
    _id: 36,
    category: `Undo`,
    description: `Reset your HEAD pointer to a previous commit ...and discard all changes since then`,
    command: `git reset --hard <commit>`,
  },
  {
    _id: 37,
    category: `Undo`,
    description: `...and preserve all changes as unstaged changes`,
    command: `git reset <commit>`,
  },
  {
    _id: 38,
    category: `Undo`,
    description: `...and preserve uncommitted local changes`,
    command: `git reset --keep <commit>`,
  },
]
